using System;
using System.Text;

namespace FractalDataWorks.SmartGenerators.CodeBuilders;

/// <summary>
/// Implementation of the code builder interface.
/// </summary>
public class CodeBuilder : ICodeBuilder
{
    private readonly string _indentString;
    private readonly StringBuilder _builder = new();
    private int _indentLevel;
    private bool _isNewLine = true;

    /// <summary>
    /// Initializes a new instance of the <see cref="CodeBuilder"/> class.
    /// </summary>
    /// <param name="indentSize">The number of spaces for each indentation level.</param>
    public CodeBuilder(int indentSize = 4)
    {
        _indentString = new string(' ', indentSize);
    }

    /// <summary>
    /// Appends a line to the code builder with proper indentation.
    /// </summary>
    /// <param name="line">The line to append.</param>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder AppendLine(string line = "")
    {
        if (_isNewLine && !string.IsNullOrEmpty(line))
        {
            for (var i = 0; i < _indentLevel; i++)
            {
                _builder.Append(_indentString);
            }
        }

        _builder.AppendLine(line);
        _isNewLine = true;
        return this;
    }

    /// <summary>
    /// Appends text to the code builder, potentially with indentation if at the start of a line.
    /// </summary>
    /// <param name="text">The text to append.</param>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder Append(string text)
    {
        if (_isNewLine && !string.IsNullOrEmpty(text))
        {
            for (var i = 0; i < _indentLevel; i++)
            {
                _builder.Append(_indentString);
            }

            _isNewLine = false;
        }

        _builder.Append(text);
        return this;
    }

    /// <summary>
    /// Increases the indentation level.
    /// </summary>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder Indent()
    {
        _indentLevel++;
        return this;
    }

    /// <summary>
    /// Decreases the indentation level.
    /// </summary>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder Outdent()
    {
        if (_indentLevel > 0)
        {
            _indentLevel--;
        }

        return this;
    }

    /// <summary>
    /// Alias for Outdent. Decreases the indentation level.
    /// </summary>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder Dedent() => Outdent();

    /// <summary>
    /// Appends a block opening, increasing indentation.
    /// </summary>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder OpenBlock()
    {
        AppendLine("{");
        Indent();
        return this;
    }

    /// <summary>
    /// Appends a block closing, decreasing indentation.
    /// </summary>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder CloseBlock()
    {
        Outdent();
        AppendLine("}");
        return this;
    }

    /// <summary>
    /// Appends a standard header for generated files.
    /// </summary>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder AppendGeneratedCodeHeader()
    {
        AppendLine("// <auto-generated/>");
        AppendLine("#nullable enable");
        AppendLine();
        return this;
    }

    /// <summary>
    /// Appends a namespace declaration.
    /// </summary>
    /// <param name="namespaceName">The namespace name.</param>
    /// <returns>The code builder instance for chaining.</returns>
    public ICodeBuilder AppendNamespace(string namespaceName)
    {
        AppendLine($"namespace {namespaceName};");
        AppendLine();
        return this;
    }

    /// <summary>
    /// Creates a temporary indentation scope that will be automatically decreased when disposed.
    /// </summary>
    /// <returns>An IDisposable that will decrease the indentation when disposed.</returns>
    public IDisposable WithIndent()
    {
        _indentLevel++;
        return new IndentScope(this);
    }

    /// <summary>
    /// Builds the code and returns it as a string.
    /// </summary>
    /// <returns>The built code as a string.</returns>
    public string Build() => ToString();

    /// <summary>
    /// Returns the built code as a string.
    /// </summary>
    /// <returns>The built code as a string.</returns>
    public override string ToString() => _builder.ToString();

    private sealed class IndentScope : IDisposable
    {
        private readonly CodeBuilder _builder;

        public IndentScope(CodeBuilder builder)
        {
            _builder = builder;
        }

        public void Dispose()
        {
            if (_builder._indentLevel > 0)
            {
                _builder._indentLevel--;
            }
        }
    }
}
